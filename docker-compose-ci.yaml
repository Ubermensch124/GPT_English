services:
  postgres:
    image: postgres:14
    container_name: postgres-1
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_DEVELOPMENT}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-1
    restart: always
    environment:
      - PRODUCTION=${PRODUCTION}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - YAPGT_API_KEY=${YAPGT_API_KEY}
      - YANDEX_CATALOG_ID=${YANDEX_CATALOG_ID}
      - POSTGRES_USER_DEVELOPMENT=${POSTGRES_USER_DEVELOPMENT}
      - POSTGRES_PASSWORD_DEVELOPMENT=${POSTGRES_PASSWORD_DEVELOPMENT}
      - POSTGRES_HOST_DEVELOPMENT=${POSTGRES_HOST_DEVELOPMENT}
      - POSTGRES_PORT_DEVELOPMENT=${POSTGRES_PORT_DEVELOPMENT}
      - POSTGRES_DB_DEVELOPMENT=${POSTGRES_DB_DEVELOPMENT}        
      - POSTGRES_USER_PRODUCTION=${POSTGRES_USER_PRODUCTION}
      - POSTGRES_PASSWORD_PRODUCTION=${POSTGRES_PASSWORD_PRODUCTION}
      - POSTGRES_HOST_PRODUCTION=${POSTGRES_HOST_PRODUCTION}
      - POSTGRES_PORT_PRODUCTION=${POSTGRES_PORT_PRODUCTION}
      - POSTGRES_DB_PRODUCTION=${POSTGRES_DB_PRODUCTION}
      - GPT_MODEL=${GPT_MODEL}
    depends_on:
      - postgres
    volumes:
      - ~/.cache/gpt4all:/app/ml_models
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend-1
    environment:
      - PRODUCTION=${PRODUCTION}
      - FRONTEND_PORT_PRODUCTION=${FRONTEND_PORT_PRODUCTION}
      - FRONTEND_PORT_DEVELOPMENT=${FRONTEND_PORT_DEVELOPMENT}
    depends_on:
      - backend
    networks:
      - app-network
  
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ~/ssl:/etc/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

volumes:
  postgres-data:

networks:
  app-network:
